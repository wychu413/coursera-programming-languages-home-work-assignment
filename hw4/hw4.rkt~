#lang racket

(provide (all-defined-out)) ;; so we can put tests in a second file


;; Write a function sequence that takes 3 arguments low,
;; high, and stride, all assumed to be numbers.
;; Further assume stride is positive. sequence produces
;; a list of numbers from low to high (including
;; low and possibly high) separated by stride and in sorted order.
(define (sequence low high stride)
  (if (> low high)
      null
      (cons low (sequence (+ low stride) high stride))))

;; Write a function string-append-map that takes
;; a list of strings xs and a string suffix and returns a
;; list of strings. Each element of the output
;; should be the corresponding element of the input appended
;; with suffix (with no extra space between the element and suffix).
(define (string-append-map xs suffix)
  (map (lambda(x) (string-append x suffix)) xs))

;; Write a function list-nth-mod that takes a list xs and a number n.
;; If the number is negative, terminate the computation
;; with (error "list-nth-mod: negative number"). Else if the list is
;; empty, terminate the computation with
;; (error "list-nth-mod: empty list"). Else return the i th
;; element of the list where we count from zero and i
;; is the remainder produced when dividing n by the
;; list’s length. Library functions length, remainder,
;; car, and list-tail are all useful
(define (list-nth-mod xs n)
  (cond [(negative? n) (error "list-nth-mod: negative number")]
        [(null? xs) (error "list-nth-mod: empty list")]
        [else (let ([i (remainder n (length xs))])
                (car (list-tail xs i)))]))

;; Write a function stream-for-n-steps that
;; takes a stream s and a number n. It returns a list holding
;; the first n values produced by s in order.
;; Assume n is non-negative
(define (stream-for-n-steps s n)
  (if (zero? n)
      null
      (cons (car (s)) (stream-for-n-steps (cdr (s)) (- n 1)))))

;; Write a stream funny-number-stream that is like the stream
;; of natural numbers (i.e., 1, 2, 3, ...)
;; except numbers divisble by 5 are negated
;; (i.e., 1, 2, 3, 4, -5, 6, 7, 8, 9, -10, 11, ...). Remember a stream
;; is a thunk that when called produces a pair.
;; Here the car of the pair will be a number and the cdr will
;; be nother stream.
(define funny-number-stream
  (letrec ([f (lambda(x)
                (cons (if (zero? (remainder x 5))
                          (- x)
                          x)
                      (lambda() (f (+ x 1)))))])
    (lambda() (f 1))))

;; Write a stream dan-then-dog, where the elements of
;; the stream alternate between the strings "dan.jpg"
;; and "dog.jpg" (starting with "dan.jpg").
;; More specifically, dan-then-dog should be a thunk that
;; when called produces a pair of "dan.jpg" and
;; a thunk that when called produces a pair of "dog.jpg"
;; and a thunk that when called... etc
(define dan-then-dog
  (letrec ([dan (lambda() (cons "dan.jpg" dog))]
           [dog (lambda() (cons "dog.jpg" dan))])
    (lambda() (dan))))

;; Write a function stream-add-zero that takes
;; a stream s and returns another stream. If s would
;; produce v for its i th element, then (stream-add-zero s)
;; would produce the pair (0 . v) for its
;; i th element. Sample solution: 4 lines. Hint: Use a thunk that when called uses s and recursion.
(define (stream-add-zero s)
  (letrec ([f (lambda(x)
                (cons (cons 0 (car (s))) (lambda() (cdr (s)))))])
    (lambda() (f s))))

;; Write a function cycle-lists that takes two lists
;; xs and ys and returns a stream. The lists may or
;; may not be the same length, but assume they are
;; both non-empty. The elements produced by the
;; stream are pairs where the first part is
;; from xs and the second part is from ys. The stream cycles
;; forever through the lists.
(define (cycle-lists xs ys)
  (define (f n)
    (cons (cons (list-nth-mod xs n)
                (list-nth-mod ys n))
          (lambda() (f (+ n 1)))))
  (lambda() (f 0)))

;; Write a function vector-assoc that takes a value v and a vector vec.
;; It should behave like Racket’s assoc library function except
;; (1) it processes a vector (Racket’s name for an array) instead of a list,
;; (2) it allows vector elements not to be pairs in which case it skips them, and
;; (3) it always takes exactly two arguments.
;; Process the vector elements in order starting from 0.
;; You must use library functions
;; vector-length, vector-ref, and equal?.
;; Return #f if no vector element is a pair with a car field
;; equal to v, else return the first pair with an equal car field.
;; Sample solution is 9 lines, using one local recursive helper function.
(define (vector-assoc v vec)
  (define vec-size (vector-length vec))
  (define (match index size)
    (cond [(equal? index size) #f] ;; no element match after all
          [(not (pair? (vector-ref vec 1))) (match (+ index 1) size)]
          [(equal? v (car (vector-ref vec index))) (vector-ref vec index)]
          [else (match (+ index 1) size)]))
  (match 0 vec-size))
  
;; Write a function cached-assoc that takes a list xs and a number n and returns a function that takes
;; one argument v and returns the same thing that (assoc v xs) would return. However, you should
;; use an n-element cache of recent results to possibly make this function faster than just calling assoc
;; (if xs is long and a few elements are returned often). The cache must be a Racket vector of length n
;; that is created by the call to cached-assoc (use Racket library function vector or make-vector) and
;; used-and-possibly-mutated each time the function returned by cached-assoc is called. Assume n is positive.
;; The cache starts empty (all elements #f). When the function returned by cached-assoc is called, it
;; first checks the cache for the answer. If it is not there, it uses assoc and xs to get the answer and if
;; the result is not #f (i.e., xs has a pair that matches), it adds the pair to the cache before returning
;; (using vector-set!). The cache slots are used in a round-robin fashion: the first time a pair is added
;; to the cache it is put in position 0, the next pair is put in position 1, etc. up to position n - 1 and
;; then back to position 0 (replacing the pair already there), then position 1, etc.
;; Hints:
;; • In addition to a variable for holding the vectoFight scener whose contents you mutate with vector-set!,
;; use a second variable to keep track of which cache slot will be replaced next. After modifying the
;; cache, increment this variable (with set!) or set it back to 0.
;; • To test your cache, it can be useful to add print expressions so you know when you are using the
;; cache and when you are not. But remove these print expressions before submitting your code.
;; • Sample solution is 15 lines.
(define (cached-assoc xs n)
  (define cache (make-vector n #f)) ;; initizlize cache
  (define next-slot 0)              ;; initialize indexer
  (define (f v)
    (let ([cache-ret (vector-assoc v cache)])  ;; search first the cache
      (if (false? cache-ret)
          (let ([scan-ret (assoc v xs)]) ;; do a full scan if cache search failed
            (if (false? scan-ret)        
                #f                       ;; just return false if nothing found
                (begin (vector-set! cache next-slot scan-ret)
                       (set! next-slot (modulo (+ next-slot 1) n))
                       scan-ret)))
          cache-ret)))
  f)




















  
  
  
  
    


  

